// playgamesound DotaMusic.GameStartup; playgamesound DotaMusic.GameStartup.Secondary; playgamesound DotaMusic.WorldMap.Actual; playgamesound DOTAMusic.HeroPicker; playgamesound DOTAMusic.Prehorn
// playgamesound DOTAMusic.BattleMusic_Epic_01;  playgamesound DOTAMusic.BattleMusic_Epic_End_01; playgamesound DOTAMusic.BattleMusic_Epic_02; playgamesound DOTAMusic.BattleMusic_Epic_End_02
// playgamesound DOTAMusic.BattleMusic_Epic_03;  playgamesound DOTAMusic.BattleMusic_Epic_End_03;  playgamesound DOTAMusic.BattleMusic_Epic_End_PreHorn
// playgamesound DOTAMusic.BattleMusic_Roshan_01; playgamesound DOTAMusic.BattleMusic_Roshan_End;  playgamesound DOTAMusic.SmokePopped;  playgamesound DOTAMusic.SmokeEndedHero;
// playgamesound DOTAMusic.SmokeEndedTower;  playgamesound DOTAMusic.SmokeEndedCreep;  playgamesound DOTAMusic.LaningMusicTutorial_01_Layer_01
// playgamesound DOTAMusic.LaningMusicTutorial_01_Layer_02;  playgamesound DOTAMusic.LaningMusicTutorial_01_Layer_03;  playgamesound DOTAMusic.LaningMusicTutorial_02_Layer_01
// playgamesound DOTAMusic.LaningMusicTutorial_02_Layer_02;  playgamesound DOTAMusic.ExploreMusicTutorial_01_Layer_01;  playgamesound DOTAMusic.ExploreMusicTutorial_01_Layer_02
// playgamesound DOTAMusic.ExploreMusicTutorial_01_Layer_03;  playgamesound DOTAMusic.StateHeroDeath;  playgamesound DOTAMusic_Hero.DeathMode;  playgamesound DOTAMusic.GankedMusicSm
// playgamesound DOTAMusic.GankedMusicMd;  playgamesound DOTAMusic.GankedMusicLg

"DotaMusic.GameStartup"
{
	"channel"		"CHAN_AUTO"
	"volume"		"0.75"
	"soundlevel"	"SNDLVL_NONE"
	"rndwave"
	{	
		"wave"		"#music\valve_dota_music_001\music\gamestartup1.mp3"
		"wave"		"#music\valve_dota_music_001\music\gamestartup2.mp3"
		"wave"		"#music\valve_dota_music_001\music\gamestartup3.mp3"
	}
	"operator_stacks"
	{
		"update_stack"
		{			
			"import_stack" "dota_update_music_stereo"
			"volume_fade_out"
			{
				"input_max" "@get_worldmap_flag.output"
			}
		}
		"start_stack"
		{
			"set_worldmap_flag"
			{
				"operator" "set_opvar_float"
				"execute_once" "true"
				"opvar" "dota_worldmap_flag"
				"input" "0.0"	
			}
		}
		
		"stop_stack"
		{

			"get_worldmap_flag"
			{
				"operator" "get_opvar_float"
				"execute_once" "true"
				"opvar" "dota_worldmap_flag"
			}
			"not_worldmap"
			{
				"operator" "math_float"
				"apply" "equals"
				"input1" "@get_worldmap_flag.output"
				"input2" "0.0"	
			}
			"play_secondary_ui_entry"
			{
				"input_execute" "@not_worldmap.output"
				"operator" "sys_start_entry"
				"execute_once" "false"
				"input_start" "1"
				"entry_name" "DotaMusic.GameStartup.Secondary" //Replace with the sound you want to play.
			}
		}
	}
}
// used locally only
// tobin?
// moved
"DotaMusic.GameStartup.Secondary"
{
	"channel"		"CHAN_AUTO"
	"volume"		"0.5"
	"soundlevel"	"SNDLVL_NONE"
	"rndwave"
	{
		"wave"			"#music\valve_dota_music_001\music\ui_main_01.mp3"
		"wave"			"#music\valve_dota_music_001\music\ui_main_02.mp3"
	}
	"operator_stacks"
	{
		"update_stack"
		{			
			"import_stack" "dota_update_music_stereo"
			"volume_fade_out"
			{
				"input_max" "@get_worldmap_flag.output"
			}
		}
		
		"stop_stack"
		{
			"get_worldmap_flag"
			{
				"operator" "get_opvar_float"
				"execute_once" "true"
				"opvar" "dota_worldmap_flag"
			}
			"not_worldmap"
			{
				"operator" "math_float"
				"apply" "equals"
				"input1" "@get_worldmap_flag.output"
				"input2" "0.0"	
			}
			"repeat_secondary_ui_entry"
			{
				"input_execute" "@not_worldmap.output"
				"operator" "sys_start_entry"
				"execute_once" "false"
				"input_start" "1"
				"entry_name" "DotaMusic.GameStartup.Secondary" //Replace with the sound you want to play.
			}
		}
	}
}
// used code and local
// tobin?
// moved
"DotaMusic.WorldMap.Actual"
{
	"channel"		"CHAN_AUTO"
	"volume"		"0.6"
	"soundlevel"	"SNDLVL_NONE"
	"wave"		 "#music\valve_dota_music_001\music\ui_world_map.mp3"
}
// used code
// moved
"DOTAMusic.HeroPicker"
{
	"channel"	"CHAN_AUTO"
	"volume"	"0.5"
	"soundlevel"  "SNDLVL_NONE"
	"wave"	"*#music\valve_dota_music_001\music\ui_hero_select.wav"  
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.00"
				"track_name" "main"
				"track_priority" "1"	
			}
		}
		
		"start_stack"
		{		
			"get_spectator_music_convar"
			{
				"operator" 	"get_convar"
				"convar"	"dota_music_enable_spectator_mode"
			}
			
			"get_current_spectator_status"
			{
				"operator" "get_opvar_float"
				"opvar" "music_is_spectator"
			}	
            
            "get_current_spectator_status_invert"
            {
                    "operator" "math_float"
                    "apply" "sub"   
                    "input1" "1.0"
                    "input2" "@get_current_spectator_status.output"
            }
			
			"check_play_spectator_music"  //Make sure the convar is set, AND we're in spectator mode
			{
				"operator" "math_float"
				"apply" "min"	
				"input1" "@get_spectator_music_convar.output"
				"input2" "@get_current_spectator_status.output"
			}
			
			"check_play_music_not_spectator"  //OR we're not in spectatir mode
			{
				"operator" "math_float"
				"apply" "max"	
				"input1" "@check_play_spectator_music.output"
				"input2" "@get_current_spectator_status_invert.output"
			}
			
			"start_music_mainloop"
			{
				"operator" "sys_start_entry"
				"execute_once" "true"
				// "input_execute"	"@get_current_spectator_status_invert.output"
				"input_execute"	"@check_play_music_not_spectator.output"
				"input_start" "1"
				"entry_name" "DOTAMusic.MainLoop" //Replace with the sound you want to play.
			}
			
			"import_stack" "dota_start_music_type_tracker"
							
			"set_music_type_opvar" //set the current music opvar
			{
				"input" "65536" //Hero Picker - doing this like this so we have a good baseline.
			}	
		}
		
		"update_stack"
		{
			"import_stack" "dota_update_music_stereo"
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"update_track"
			{
				"operator" "track_update"
				"stop_channel_on_track" "true"	
			}
			
			"block_hero_picker_entries"
			{
				"operator" "sys_block_entries"
				"input_active" "1.0"	
				"input_duration" "0.5"
				"match_substring" "false"
				"match_entry" "DOTAMusic.HeroPicker"
				"match_channel" "false"
				"match_entity" "false"
			}

			"volume_fade_out"
			{
				"input_max" "2"
 			}
		}
		
		"stop_stack"
		{
			"import_stack" "dota_stop_music_type_tracker"
			
			"remove_music_value"
			{
				"input2" "65536" //Hero Picker
			}	
			
			"get_spectator_music_convar"
			{
				"operator" 	"get_convar"
				"convar"	"dota_music_enable_spectator_mode"
			}
			
			"get_current_spectator_status"
			{
				"operator" "get_opvar_float"
				"opvar" "music_is_spectator"
			}	
			
			"check_play_spectator_music"  //Make sure the convar is set, AND we're in spectator mode
			{
				"operator" "math_float"
				"apply" "min"	
				"input1" "@get_spectator_music_convar.output"
				"input2" "@get_current_spectator_status.output"
			}
			
			"start_music_prehorn"
			{
				"operator" "sys_start_entry"
				"execute_once" "true"
				// "input_execute"	"@get_current_spectator_status_invert.output"
				"input_execute"	"@check_play_spectator_music.output"
				"input_start" "1"
				"entry_name" "DOTAMusic.Prehorn" //Replace with the sound you want to play.
			}
		}
	}
}
// used code
// moved
"DOTAMusic.Prehorn"
{
	"channel"	"CHAN_AUTO"
	"volume"	"0.75"
	"soundlevel"  "SNDLVL_NONE"
	"wave"	"*#music\valve_dota_music_001\music\countdown.mp3"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.00"
				"track_name" "main"
				"track_priority" "1"	
			}
		}
		
		"start_stack"
		{
			"import_stack" "dota_start_music_type_tracker"
			
			"add_music_value"
			{
				"input2" "4096" //Prehorn music
			}
			
			"set_prehorn_opvar"
			{
				"operator"	"set_opvar_float"
				"opvar"		"music_prehorn_playing"
				"input"		"1.0"
			}			
		}
		
		"update_stack"
		{
			"import_stack" "dota_update_music_stereo"
			"mixer"
			{
				"mixgroup" "Music"
			}

			"volume_fade_in"
			{
				"input_max" "5.0"
			}

			"volume_fade_out"
			{
				"input_max" "3.0"
			}
			
			"update_track"
			{
				"operator" "track_update"
				"stop_channel_on_track" "true"	
			}
			
			"block_prehorn_entries"
			{
				"operator" "sys_block_entries"
				"input_active" "1.0"	
				"input_duration" "0.5"
				"match_substring" "false"
				"match_entry" "DOTAMusic.Prehorn"
				"match_channel" "false"
				"match_entity" "false"
			}
		}
		
		"stop_stack"
		{
			"import_stack" "dota_stop_music_type_tracker"
			
			"remove_music_value"
			{
				"input2" "4096" //Prehorn
			}
			
			"set_prehorn_opvar"
			{
				"operator"	"set_opvar_float"
				"opvar"		"music_prehorn_playing"
				"input"		"0.0"
			}
		}
	}
}

// no code, called battle music picker
"DOTAMusic.BattleMusic_Epic_01"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.8"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\valve_dota_music_001\music\battle_01.mp3"
	
	"soundentry_version" "2"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "1.118"
				"end_point" "36.89"
				"track_name" "main"
				"sync_track_name" "main"
				"track_priority" "45"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "1.118"
						"2"	"5.59"
						"3"	"10.062"
						"4"	"14.534"
						"5" "19.006"
						"6"	"23.478"
						"7"	"27.95"
						"8"	"32.422"
						"9" "36.89"
					}	
				}
				"override_priority" "false"	
			}
		}
		
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"start_stack"
		{
            "get_debug_printing_opvar" 
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************BATTLE MUSIC STARTED**************" 
			{
				"execute_once" "false"
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}	
			
			"import_stack" "dota_start_music_type_tracker"
			
			"add_music_value"
			{
				"input2" "4" //Battle
			}
			
			"import_stack"	"dota_spectator_flag_set"
		}
		
		"update_stack"
		{
			"import_stack" "dota_update_music_stereo"
			"mixer"
			{
				"mixgroup" "Music"
			}

			"volume_fade_out"
			{
				"input_max" "2.0"
			}
			
			"update_track"
			{
				"operator" "track_update"
				"autoqueue_entry_at_end_point" "DOTAMusic.BattleMusic_Epic_01"
				"stop_channel_on_track" "true"	
			}
		}
		
		"stop_stack" //have to do this in the syop stack, because _End doesnt get called in some cases (like death)
		{
			
			"import_stack" "dota_stop_music_type_tracker"
			
			"remove_music_value"
			{
				"input2" "4" //Battle
			}
			
            "get_debug_printing_opvar" //set the opvar to 0.0, do this once only.  //this is for debugging
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************BATTLE MUSIC KILLED**************" 
			{
				"execute_once" "false"
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}
		}
	}
}
// no code, called if matches "epic"
"DOTAMusic.BattleMusic_Epic_End_01"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.7"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\valve_dota_music_001\music\battle_01_end.mp3"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "1.118"
				"end_point" "5.59"
				"track_name" "main"
				"sync_track_name" "main"
				"track_priority" "47"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "1.118"
						"2"	"5.59"
					}	
				}
				"override_priority" "false"	
			}
		}
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"start_stack"
		{
			"import_stack"	"dota_spectator_flag_set"
			
			"set_spectator_flag_opar"
			{
				"input"		"0.0"				
			}
		}
		
		"update_stack"
		{
			"import_stack" "dota_update_music_stereo"
			"mixer"
			{
				"mixgroup" "Music"
			}
			"update_track"
			{
				"operator" "track_update"
				// "autoqueue_entry_at_end_point" "DOTAMusic.StateExploreMusic"
				"stop_channel_on_track" "true"	
			}
			
			"battle_music_stop" //brute forcing this shit cuz we can still get two effing battle musics WTF?!
			{
				"execute_once" "true"
				"input_execute"	"1.0"	
				"operator" "sys_stop_entries"
				"input_max_entries" "0.000000" //A sound will not stop itself from playing.
				"match_entity" "false"	
				"match_substring" "true"
				"match_entry" "DOTAMusic.BattleMusic_Epic_0" //Stop the smoke music if you attack a creep.	
			}
		}
	}
}
// no code, called local
"DOTAMusic.BattleMusic_Epic_02"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.8"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\valve_dota_music_001\music\battle_02.mp3"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "1.173"
				"end_point" "43.845"
				"track_name" "main"
				"sync_track_name" "main"
				"track_priority" "45"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "1.173"
						"2"	"3.84"
						"3"	"6.507"
						"4"	"9.174"
						"5" "11.841"
						"6"	"14.508"
						"7"	"17.175"
						"8"	"19.842"
						"9" "22.509"
						"10" "25.176"
						"11" "27.843"
						"12" "30.51"
						"13" "33.177"
						"14" "35.844"
						"15" "38.511"
						"16" "41.178"
						"17" "43.845"
					}	
				}
				"override_priority" "false"	
			}
		}
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"start_stack"
		{
            "get_debug_printing_opvar" 
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************BATTLE MUSIC STARTED**************" 
			{
				"execute_once" "false"
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}	
			
			"import_stack" "dota_start_music_type_tracker"
			
			"add_music_value"
			{
				"input2" "4" //Battle
			}
			
			"import_stack"	"dota_spectator_flag_set"
		}
		
		"update_stack"
		{
			"import_stack" "dota_update_music_stereo"
			"mixer"
			{
				"mixgroup" "Music"
			}

			"volume_fade_out"
			{
				"input_max" "2.0"
			}		
			
			"speakers_output"
			{
				"input_speakers" "0.0"
			}
			
			"speakers_output_fix"
			{
				"operator" "sys_output"
				"input_speakers" "@speakers_limit.output" 
				"output" "speakers"
			}
			
			"update_track"
			{
				"operator" "track_update"
				"autoqueue_entry_at_end_point" "DOTAMusic.BattleMusic_Epic_02"
				"stop_channel_on_track" "true"	
			}
		}
		
		"stop_stack" //have to do this in the syop stack, because _End doesnt get called in some cases (like death)
		{
			
			"import_stack" "dota_stop_music_type_tracker"
			
			"remove_music_value"
			{
				"input2" "4" //Battle
			}
			
            "get_debug_printing_opvar" //set the opvar to 0.0, do this once only.  //this is for debugging
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************BATTLE MUSIC KILLED**************" 
			{
				"execute_once" "false"
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}
		}
	}
}
// no code, called local
"DOTAMusic.BattleMusic_Epic_End_02"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.7"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\valve_dota_music_001\music\battle_02_end.mp3"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "1.173"
				"end_point" "9.304"
				"track_name" "main"
				"sync_track_name" "main"
				"track_priority" "47"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "1.173"
						"2"	"9.304"
					}	
				}
				"override_priority" "false"	
			}
		}
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"start_stack"
		{
			"import_stack"	"dota_spectator_flag_set"
			
			"set_spectator_flag_opar"
			{
				"input"		"0.0"				
			}
		}
		
		"update_stack"
		{
			"import_stack" "dota_update_music_stereo"
			"mixer"
			{
				"mixgroup" "Music"
			}
			"update_track"
			{
				"operator" "track_update"
				// "autoqueue_entry_at_end_point" "DOTAMusic.StateExploreMusic"
				"stop_channel_on_track" "true"	
			}
			
			"battle_music_stop" //brute forcing this shit cuz we can still get two effing battle musics WTF?!
			{
				"execute_once" "true"
				"input_execute"	"1.0"	
				"operator" "sys_stop_entries"
				"input_max_entries" "0.000000" //A sound will not stop itself from playing.
				"match_entity" "false"	
				"match_substring" "true"
				"match_entry" "DOTAMusic.BattleMusic_Epic_0" //Stop the smoke music if you attack a creep.	
			}
		}
	}
}
// no code, called local
"DOTAMusic.BattleMusic_Epic_03"
{
	"channel"		"CHAN_STATIC"
	"volume"		"1.0"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\valve_dota_music_001\music\battle_03.mp3"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" ".65"
				"end_point" "72.638"
				"track_name" "main"
				"sync_track_name" "main"
				"track_priority" "45"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" ".65"
						"2"	"4.078"
						"3"	"7.506"
						"4"	"10.934"
						"5" "14.362"
						"6"	"17.79"
						"7"	"21.218"
						"8"	"24.646"
						"9" "28.074"
						"10" "31.502"
						"11" "34.93"
						"12" "38.358"
						"13" "41.786"
						"14" "45.214"
						"15" "48.462"
						"16" "52.07"
						"17" "55.498"
						"18" "58.926"
						"19" "62.354"
						"20" "65.782"
						"21" "69.21"
						"22" "72.638"
					}	
				}
				"override_priority" "false"	
			}
		}
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"start_stack"
		{
            "get_debug_printing_opvar" 
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************BATTLE MUSIC STARTED**************" 
			{
				"execute_once" "false"
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}	
			
			"import_stack" "dota_start_music_type_tracker"
			
			"add_music_value"
			{
				"input2" "4" //Battle
			}
			
			"import_stack"	"dota_spectator_flag_set"
		}
		
		"update_stack"
		{
			"import_stack" "dota_update_music_stereo"
			"mixer"
			{
				"mixgroup" "Music"
			}

			"volume_fade_out"
			{
				"input_max" "2.0"
			}
			
			"update_track"
			{
				"operator" "track_update"
				"autoqueue_entry_at_end_point" "DOTAMusic.BattleMusic_Epic_03"
				"stop_channel_on_track" "true"	
			}
		}
		
		"stop_stack" //have to do this in the syop stack, because _End doesnt get called in some cases (like death)
		{
			
			"import_stack" "dota_stop_music_type_tracker"
			
			"remove_music_value"
			{
				"input2" "4" //Battle
			}
			
            "get_debug_printing_opvar" //set the opvar to 0.0, do this once only.  //this is for debugging
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************BATTLE MUSIC KILLED**************" 
			{
				"execute_once" "false"
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}
		}
	}
}
// no code, called local
"DOTAMusic.BattleMusic_Epic_End_03"
{
	"channel"		"CHAN_STATIC"
	"volume"		"1.0"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\valve_dota_music_001\music\battle_03_end.mp3"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" ".645"
				"end_point" "9.0"
				"track_name" "main"
				"sync_track_name" "main"
				"track_priority" "47"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" ".645"
						"2"	"9.0"
					}	
				}
				"override_priority" "false"	
			}
		}
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"start_stack"
		{
			"import_stack"	"dota_spectator_flag_set"
			
			"set_spectator_flag_opar"
			{
				"input"		"0.0"				
			}
		}
		
		"update_stack"
		{
			"import_stack" "dota_update_music_stereo"
			"mixer"
			{
				"mixgroup" "Music"
			}
			"update_track"
			{
				"operator" "track_update"
				// "autoqueue_entry_at_end_point" "DOTAMusic.StateExploreMusic"
				"stop_channel_on_track" "true"	
			}
			
			"battle_music_stop" //brute forcing this shit cuz we can still get two effing battle musics WTF?!
			{
				"execute_once" "true"
				"input_execute"	"1.0"	
				"operator" "sys_stop_entries"
				"input_max_entries" "0.000000" //A sound will not stop itself from playing.
				"match_entity" "false"	
				"match_substring" "true"
				"match_entry" "DOTAMusic.BattleMusic_Epic_0" //Stop the smoke music if you attack a creep.	
			}
		}
	}
}
// used code
"DOTAMusic.BattleMusic_Epic_End_PreHorn"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.7"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\valve_dota_music_001\music\battle_01_end.mp3"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "1.118"
				"end_point" "5.59"
				"track_name" "main"
				"sync_track_name" "main"
				"track_priority" "47"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "1.118"
						"2"	"5.59"
					}	
				}
				"override_priority" "false"	
			}
		}
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"update_stack"
		{
			"import_stack" "dota_update_music_stereo"
			"mixer"
			{
				"mixgroup" "Music"
			}
			"update_track"
			{
				"operator" "track_update"
				// "autoqueue_entry_at_end_point" "DOTAMusic.StateExploreMusic"
				"stop_channel_on_track" "true"	
			}
		}
	}
}
// no code, call local
"DOTAMusic.BattleMusic_Roshan_01"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.7"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\valve_dota_music_001\music\roshan.mp3"
	
	"soundentry_version" "2"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.5"
				"end_point" "42.5"
				"track_name" "main"
				"sync_track_name" "main"
				"track_priority" "40"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "0.5"
						"2"	"4.0"
						"3"	"7.5"
						"4"	"11.0"
						"5" "14.5"
						"6"	"18.0"
						"7"	"21.5"
						"8"	"25.0"
						"9" "28.5"
						"10"	"32.0"
						"11"	"35.5"
						"12"	"39.0"
						"13"	"42.5"						
					}	
				}
				"override_priority" "false"	
			}
		}
		
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"start_stack"
		{
			"import_stack" "dota_start_music_type_tracker"
			
			"add_music_value"
			{
				"input2" "128" //Roshan
			}	
		}
		
		"update_stack"
		{
			
			"import_stack" "dota_opvar_smoothing_update"
			
			"get_live_value_opvar" //Get the current from-the-game battle score
			{
				"operator" "get_opvar_float"
				"opvar" "music_roshan_health_state" //replace me
			}
			
			"get_smooth_value_opvar" //get our smoothed version of the battle score
			{
				"operator" "get_opvar_float"
				"opvar" "music_roshan_health_state_smooth" //replace me
			}	
			
			"get_attack_value_opvar"
			{	
				"operator" 	"get_opvar_float"
				"opvar" 	"music_roshan_attack_state"			
			}
			
			"remap_travel_distance_to_time"
			{
				"input_X1" "0.1"	
				"input_Y1" "0.1"	
				"input_X2" "5.0"	
				"input_Y2" "2.0"	
				"input_X3" "8.0"	
				"input_Y3" "2.0"	
				"input_X4" "10.0"	
				"input_Y4" "4.0"	
			}
			
			"remap_travel_distance_to_time_falling"
			{
				"input_X1" "0.1"	
				"input_Y1" "0.1"	
				"input_X2" "5.0"	
				"input_Y2" "2.0"	
				"input_X3" "8.0"	
				"input_Y3" "2.0"	
				"input_X4" "10.0"	
				"input_Y4" "4.0"	
			}	
			
			"set_opvar"
			{
				"opvar" "music_roshan_health_state_smooth"
			}
		
			"remap_health_to_vol" //health is 0-100
			{
				"operator" "math_curve_2d_4knot"
				"curve_type" "linear"	
				"input" "@opvar_value_ramp.output"
				"input_X1" "15.0"	
				"input_Y1" "1.0"	
				"input_X2" "25.0"	
				"input_Y2" "0.9"	
				"input_X3" "95.0"	
				"input_Y3" "0.35"	
				"input_X4" "100.0"	
				"input_Y4" "0.1"	
			}
			
			"fadetime_compare" //use shorter fadetime if Roshan is dead
			{
				"operator" "math_float"
				"apply" "equals"	
				"input1" "@get_attack_value_opvar.output"
				"input2" "2.0" 
			}
			
			"fadetime_short"
			{
				"operator" "math_float"
				"apply" "mult"	
				"input1" "1.0"
				"input2" "0.5" 
			}
			
			"fadetime_long"
			{
				"operator" "math_float"
				"apply" "mult"	
				"input1" "3.0"
				"input2" "1.0" 
			}
		
			"fadetime_logic_switch"
			{
				"operator" "math_logic_switch" 
				"input1" "@fadetime_long.output"
				"input2" "@fadetime_short.output"
				"input_switch" "@opvar_smoothing_difference_compare.output"
			}
			
			"import_stack" "dota_update_music_stereo"
			
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"volume_fade_out"
			{
				"input_max" "@fadetime_logic_switch.output"
 			}
			
			"external_scaler"
			{
				"operator" "math_float"
				"apply" "mult"	
				"input2" "@remap_health_to_vol.output"
			}

			"speakers_limit"
			{
				"input2[*]" "@external_scaler.output"
			}
			
			// "speakers_output"
			// {
				// "input_speakers" "0.5"
			// }
				
			"speakers_output"
			{
				"input_speakers" "0.0"
			}
			
			"speakers_output_fix"
			{
				"operator" "sys_output"
				"input_speakers" "@speakers_limit.output" 
				"output" "speakers"
			}
			
			"speakers_output_fix"
			{
				"operator" "sys_output"
				"input_speakers" "@speakers_limit.output" 
				"output" "speakers"
			}
			
			"update_track"
			{
				"operator" "track_update"
				"autoqueue_entry_at_end_point" "DOTAMusic.BattleMusic_Roshan_01"
				"stop_channel_on_track" "true"	
			}
			
		}
		
		"stop_stack"
		{
			"import_stack" "dota_stop_music_type_tracker"
			
			"remove_music_value"
			{
				"input2" "128" //Roshan
			}	
		}
	}
}

// no code, called above
"DOTAMusic.BattleMusic_Roshan_End"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.8"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\valve_dota_music_001\music\roshan_end.mp3"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.5"
				"end_point" "2.5"
				"track_name" "main"
				"sync_track_name" "main"
				"track_priority" "42"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "0.5"
						"2"	"2.5"
					}	
				}
				"override_priority" "false"	
			}
		}
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"update_stack"
		{
			"import_stack" "dota_update_music_stereo"
			"mixer"
			{
				"mixgroup" "Music"
			}
			"update_track"
			{
				"operator" "track_update"
				"stop_channel_on_track" "true"	
			}			
		}
	}
}

// no code, called above
"DOTAMusic.SmokePopped"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.8"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\valve_dota_music_001\music\smoke.wav" 
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.5"
				"end_point" "2.5"
				"track_name" "main"
				"sync_track_name" "main"
				"track_priority" "5"	
				// "syncpoints"
				// {
					// "syncpoints_1"
					// {
						// "1" "0.5"
						// "2"	"2.5"
					// }	
				// }
				"override_priority" "false"	
			}
		}
		"prestart_stack" //replaces null.wav
 		{
 			// "sync_track_syncpoints"
 			// {
 				// "operator" "track_queue"
 				// "syncpoint_list" "syncpoints_1"
 			// }
 		}
		
		"start_stack"
		{			
			"import_stack" "dota_start_music_type_tracker"
			
			"add_music_value"
			{
				"input2" "8192" //Roshan
			}	
		}
		
		"update_stack"
		{	
			"import_stack" "dota_update_music_stereo"
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"volume_fade_out"
			{
				"input_max" "3.0"
			}				
			
			"speakers_output"
			{
				"input_speakers" "0.0"
			}
			
			"speakers_output_fix"
			{
				"operator" "sys_output"
				"input_speakers" "@speakers_limit.output" 
				"output" "speakers"
			}
			
			"update_track"
			{
				"operator" "track_update"
				// "autoqueue_entry_at_end_point" "DOTAMusic.StateExploreMusic"
				"stop_channel_on_track" "true"	
			}
		}
		
		"stop_stack"
		{
			"import_stack" "dota_stop_music_type_tracker"
			
			"remove_music_value"
			{
				"input2" "8192" //Roshan
			}	
		}
	}
}
// no code, called above
"DOTAMusic.SmokeEndedHero"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.8"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\valve_dota_music_001\music\smoke_end_hero.mp3" 
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.5"
				"end_point" "2.5"
				"track_name" "main"
				"sync_track_name" "main"
				"track_priority" "10"	
				// "syncpoints"
				// {
					// "syncpoints_1"
					// {
						// "1" "0.5"
						// "2"	"2.5"
					// }	
				// }
				"override_priority" "false"	
			}
		}
		"prestart_stack" //replaces null.wav
 		{
 			// "sync_track_syncpoints"
 			// {
 				// "operator" "track_queue"
 				// "syncpoint_list" "syncpoints_1"
 			// }
 		}
		
		"update_stack"
		{	
			"import_stack" "dota_update_music_stereo"
			"mixer"
			{
				"mixgroup" "Music"
			}
			"update_track"
			{
				"operator" "track_update"
				// "autoqueue_entry_at_end_point" "DOTAMusic.StateExploreMusic"
				"stop_channel_on_track" "true"	
			}
			
			"speakers_output"
			{
				"input_speakers" "0.0"
			}
			
			"speakers_output_fix"
			{
				"operator" "sys_output"
				"input_speakers" "@speakers_limit.output" 
				"output" "speakers"
			}
		}
	}
}
// called above
"DOTAMusic.SmokeEndedTower"
{
	"channel"		"CHAN_STATIC"
	"volume"		"1.0"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\valve_dota_music_001\music\smoke_end.wav" 
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "2.0"
				"end_point" "9.66"
				"track_name" "main"
				"sync_track_name" "main"
				"track_priority" "10"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "2.0"
						"2"	"9.66"
					}	
				}
				"override_priority" "false"	
			}
		}
		"prestart_stack" //replaces null.wav
 		{
 			// "sync_track_syncpoints"
 			// {
 				// "operator" "track_queue"
 				// "syncpoint_list" "syncpoints_1"
 			// }
 		}
		
		"update_stack"
		{	
			"import_stack" "dota_update_music_stereo"
			"mixer"
			{
				"mixgroup" "Music"
			}
			"update_track"
			{
				"operator" "track_update"
				// "autoqueue_entry_at_end_point" "DOTAMusic.StateExploreMusic"
				"stop_channel_on_track" "true"	
			}
			
			"speakers_output"
			{
				"input_speakers" "0.0"
			}
			
			"speakers_output_fix"
			{
				"operator" "sys_output"
				"input_speakers" "@speakers_limit.output" 
				"output" "speakers"
			}
		}
	}
}
// called above
"DOTAMusic.SmokeEndedCreep"
{
	"channel"		"CHAN_STATIC"
	"volume"		"1.0"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\valve_dota_music_001\music\smoke_end.wav" 
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "2.0"
				"end_point" "9.66"
				"track_name" "main"
				"sync_track_name" "main"
				"track_priority" "10"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "2.0"
						"2"	"9.66"
					}	
				}
				"override_priority" "false"	
			}
		}
		"prestart_stack" //replaces null.wav
 		{
 			// "sync_track_syncpoints"
 			// {
 				// "operator" "track_queue"
 				// "syncpoint_list" "syncpoints_1"
 			// }
 		}
		
		"update_stack"
		{	
			"import_stack" "dota_update_music_stereo"
			"mixer"
			{
				"mixgroup" "Music"
			}
			"update_track"
			{
				"operator" "track_update"
				"stop_channel_on_track" "true"	
			}
			
			"speakers_output"
			{
				"input_speakers" "0.0"
			}
			
			"speakers_output_fix"
			{
				"operator" "sys_output"
				"input_speakers" "@speakers_limit.output" 
				"output" "speakers"
			}
		}
	}
}
"DOTAMusic.LaningMusicTutorial_01_Layer_01"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.4"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\valve_dota_music_001\music\laning_01_layer_01.mp3"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0"
				"end_point" "161.802"
				"track_name" "explore1"
				"sync_track_name" "explore1"
				"track_priority" "1"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "0.000"
						"2" "161.802"
					}	
				}
				"override_priority" "false"	
			}
		}
		
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"start_stack"
		{
			"get_random_delay_opvar"
			{
				"operator" "get_opvar_float"
				"opvar" 	"laning_01_random_delay_opvar"
			}
		
			"explore_music_delay_output"
			{
				"operator" "sys_output"
				"input_float" "@get_random_delay_opvar.output" //delays the start of a sound by a random amount
				"output" "delay"
			}
			
            "get_debug_printing_opvar" //set the opvar to 0.0, do this once only.  //this is for debugging
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
		}
		
		"update_stack"
		{
			
			"import_stack" "dota_update_music_4layer"
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"volume_fade_out"
			{
				"input_max" "2"
 			}
			
			"intensity_to_vol_remap"
			{
				"input_X1" "0.0"	
				"input_Y1" "1.0"	
				"input_X2" "0.2"	
				"input_Y2" "1.0"	
				"input_X3" "0.67"	
				"input_Y3" "1.0"	
				"input_X4" "1.0"	
				"input_Y4" "0.5"	
			}
			
			"speakers_limit"	
			{
				"input2[*]" "@speaker_volume.output"		
			}
			
			"update_track"
			{
				"operator" "track_update"
				"stop_channel_on_track" "false"	
			}
		}
		
		"stop_stack"
		{
			"4layer_stop" 
			{
				"operator" "sys_stop_entries"
				"input_execute" "1.0"
				"input_max_entries" "0.000000" //A sound will not stop itself from playing.
				"match_entry" "DOTAMusic.LaningMusicTutorial"
				"match_entity" "false"	
				"match_substring" "true"
			}
			
			"4layer_stop_loop" 
			{
				"operator" "sys_stop_entries"
				"input_execute" "1.0"
				"input_max_entries" "0.000000" //A sound will not stop itself from playing.
				"match_entry" "DOTAMusic.LaningMusicTutorial_01"
				"match_entity" "false"	
				"match_substring" "false"
			}
		}	
	}
}

"DOTAMusic.LaningMusicTutorial_01_Layer_02"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.4"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\valve_dota_music_001\music\laning_01_layer_02.mp3"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0"
				"end_point" "161.802"
				"track_name" "explore2"
				"sync_track_name" "explore2"
				"track_priority" "1"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "0.000"
						"2" "161.802"
					}	
				}
				"override_priority" "false"	
			}
		}
		
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"start_stack"
		{
			"get_random_delay_opvar"
			{
				"operator" "get_opvar_float"
				"opvar" 	"laning_01_random_delay_opvar"
			}
		
			"explore_music_delay_output"
			{
				"operator" "sys_output"
				"input_float" "@get_random_delay_opvar.output" //delays the start of a sound by a random amount
				"output" "delay"
			}
		}
		
		"update_stack"
		{
			
			"import_stack" "dota_update_music_4layer"
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"volume_fade_out"
			{
				"input_max" "2"
 			}
			
			"intensity_to_vol_remap"
			{
				"input_X1" "0.1"	
				"input_Y1" "0.1"	
				"input_X2" "0.25"	
				"input_Y2" "1.0"	
				"input_X3" "0.25"	
				"input_Y3" "1.0"	
				"input_X4" "0.25"	
				"input_Y4" "1.0"	
			}
			
			"speakers_limit"	
			{
				"input2[*]" "@speaker_volume.output"		
			}
			
			"update_track"
			{
				"operator" "track_update"
				"stop_channel_on_track" "false"	
			}
		}
		
		"stop_stack"
		{
			"4layer_stop" 
			{
				"operator" "sys_stop_entries"
				"input_execute" "1.0"
				"input_max_entries" "0.000000" //A sound will not stop itself from playing.
				"match_entry" "DOTAMusic.LaningMusicTutorial"
				"match_entity" "false"	
				"match_substring" "true"
			}
			
			"4layer_stop_loop" 
			{
				"operator" "sys_stop_entries"
				"input_execute" "1.0"
				"input_max_entries" "0.000000" //A sound will not stop itself from playing.
				"match_entry" "DOTAMusic.LaningMusicTutorial_01"
				"match_entity" "false"	
				"match_substring" "false"
			}
		}	
	}
}

"DOTAMusic.LaningMusicTutorial_01_Layer_03"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.4"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\valve_dota_music_001\music\laning_01_layer_03.mp3"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0"
				"end_point" "161.802"
				"track_name" "explore3"
				"sync_track_name" "explore3"
				"track_priority" "1"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "0.000"
						"2" "161.802"
					}	
				}
				"override_priority" "false"	
			}
		}
		
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"start_stack"
		{
			"get_random_delay_opvar"
			{
				"operator" "get_opvar_float"
				"opvar" 	"laning_01_random_delay_opvar"
			}
		
			"explore_music_delay_output"
			{
				"operator" "sys_output"
				"input_float" "@get_random_delay_opvar.output" //delays the start of a sound by a random amount
				"output" "delay"
			}
		}
		
		"update_stack"
		{
			
			"import_stack" "dota_update_music_4layer"
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"volume_fade_out"
			{
				"input_max" "2"
 			}
			
			"intensity_to_vol_remap"
			{
				"input_X1" "0.0"	
				"input_Y1" "0.1"	
				"input_X2" "0.2"	
				"input_Y2" "0.1"	
				"input_X3" "0.6"	
				"input_Y3" "0.3"	
				"input_X4" "1.0"	
				"input_Y4" "1.0"				
			}
			
			"speakers_limit"	
			{
				"input2[*]" "@speaker_volume.output"		
			}
			
			"update_track"
			{
				"operator" "track_update"
				"stop_channel_on_track" "false"	
			}
		}
		
		"stop_stack"
		{
			"4layer_stop" 
			{
				"operator" "sys_stop_entries"
				"input_execute" "1.0"
				"input_max_entries" "0.000000" //A sound will not stop itself from playing.
				"match_entry" "DOTAMusic.LaningMusicTutorial"
				"match_entity" "false"	
				"match_substring" "true"
			}
			
			"4layer_stop_loop" 
			{
				"operator" "sys_stop_entries"
				"input_execute" "1.0"
				"input_max_entries" "0.000000" //A sound will not stop itself from playing.
				"match_entry" "DOTAMusic.LaningMusicTutorial_01"
				"match_entity" "false"	
				"match_substring" "false"
			}
		}	
	}
}

"DOTAMusic.LaningMusicTutorial_02_Layer_01"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.3"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\valve_dota_music_001\music\laning_02_layer_01.mp3"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0"
				"end_point" "161.802"
				"track_name" "explore1"
				"sync_track_name" "explore1"
				"track_priority" "1"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "0.000"
						"2" "161.802"
					}	
				}
				"override_priority" "false"	
			}
		}
		
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"start_stack"
		{
			"get_random_delay_opvar"
			{
				"operator" "get_opvar_float"
				"opvar" 	"laning_02_random_delay_opvar"
			}
		
			"explore_music_delay_output"
			{
				"operator" "sys_output"
				"input_float" "@get_random_delay_opvar.output" //delays the start of a sound by a random amount
				"output" "delay"
			}
			
            "get_debug_printing_opvar" //set the opvar to 0.0, do this once only.  //this is for debugging
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
		}
		
		"update_stack"
		{
			
			"import_stack" "dota_update_music_4layer"
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"volume_fade_out"
			{
				"input_max" "2"
 			}
			
			"intensity_to_vol_remap"
			{
				"input_X1" "0.0"	
				"input_Y1" "1.0"	
				"input_X2" "0.2"	
				"input_Y2" "1.0"	
				"input_X3" "0.67"	
				"input_Y3" "1.0"	
				"input_X4" "1.0"	
				"input_Y4" "0.5"	
			}
			
			"speakers_limit"	
			{
				"input2[*]" "@speaker_volume.output"		
			}
			
			"update_track"
			{
				"operator" "track_update"
				"stop_channel_on_track" "false"	
			}
		}
		
		"stop_stack"
		{
			"4layer_stop" 
			{
				"operator" "sys_stop_entries"
				"input_execute" "1.0"
				"input_max_entries" "0.000000" //A sound will not stop itself from playing.
				"match_entry" "DOTAMusic.LaningMusicTutorial"
				"match_entity" "false"	
				"match_substring" "true"
			}
			
			"4layer_stop_loop" 
			{
				"operator" "sys_stop_entries"
				"input_execute" "1.0"
				"input_max_entries" "0.000000" //A sound will not stop itself from playing.
				"match_entry" "DOTAMusic.LaningMusicTutorial_02"
				"match_entity" "false"	
				"match_substring" "false"
			}
		}	
	}
}

"DOTAMusic.LaningMusicTutorial_02_Layer_02"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.4"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\valve_dota_music_001\music\laning_02_layer_02.mp3"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0"
				"end_point" "161.802"
				"track_name" "explore2"
				"sync_track_name" "explore2"
				"track_priority" "1"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "0.000"
						"2" "161.802"
					}	
				}
				"override_priority" "false"	
			}
		}
		
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"start_stack"
		{
			"get_random_delay_opvar"
			{
				"operator" "get_opvar_float"
				"opvar" 	"laning_02_random_delay_opvar"
			}
		
			"explore_music_delay_output"
			{
				"operator" "sys_output"
				"input_float" "@get_random_delay_opvar.output" //delays the start of a sound by a random amount
				"output" "delay"
			}
		}
		
		"update_stack"
		{
			
			"import_stack" "dota_update_music_4layer"
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"volume_fade_out"
			{
				"input_max" "2"
 			}
			
			"intensity_to_vol_remap"
			{
				"input_X1" "0.1"	
				"input_Y1" "0.1"	
				"input_X2" "0.25"	
				"input_Y2" "1.0"	
				"input_X3" "0.25"	
				"input_Y3" "1.0"	
				"input_X4" "0.25"	
				"input_Y4" "1.0"	
			}
			
			"speakers_limit"	
			{
				"input2[*]" "@speaker_volume.output"		
			}
			
			"update_track"
			{
				"operator" "track_update"
				"stop_channel_on_track" "false"	
			}
		}
		
		"stop_stack"
		{
			"4layer_stop" 
			{
				"operator" "sys_stop_entries"
				"input_execute" "1.0"
				"input_max_entries" "0.000000" //A sound will not stop itself from playing.
				"match_entry" "DOTAMusic.LaningMusicTutorial"
				"match_entity" "false"	
				"match_substring" "true"
			}
			
			"4layer_stop_loop" 
			{
				"operator" "sys_stop_entries"
				"input_execute" "1.0"
				"input_max_entries" "0.000000" //A sound will not stop itself from playing.
				"match_entry" "DOTAMusic.LaningMusicTutorial_02"
				"match_entity" "false"	
				"match_substring" "false"
			}
		}	
	}
}

//BLOCKEND

"DOTAMusic.ExploreMusicTutorial_01_Layer_01"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.3"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\valve_dota_music_001\music\explore_01_layer_01.mp3"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0"
				"end_point" "161.802"
				"track_name" "explore1"
				"sync_track_name" "explore1"
				"track_priority" "1"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "0.000"
						"2" "161.802"
					}	
				}
				"override_priority" "false"	
			}
		}
		
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"start_stack"
		{
			"get_random_delay_opvar"
			{
				"operator" "get_opvar_float"
				"opvar" 	"explore_random_delay_opvar"
			}
		
			"explore_music_delay_output"
			{
				"operator" "sys_output"
				"input_float" "@get_random_delay_opvar.output" //delays the start of a sound by a random amount
				"output" "delay"
			}
			
            "get_debug_printing_opvar" //set the opvar to 0.0, do this once only.  //this is for debugging
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************LANING_MUSIC_STARTED**************" 
			{
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}
		}
		
		"update_stack"
		{
			
			"import_stack" "dota_update_music_4layer"
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"volume_fade_out"
			{
				"input_max" "2"
 			}
			
			"intensity_to_vol_remap"
			{
				"input_X1" "0.0"	
				"input_Y1" "1.0"	
				"input_X2" "0.2"	
				"input_Y2" "1.0"	
				"input_X3" "0.67"	
				"input_Y3" "1.0"	
				"input_X4" "1.0"	
				"input_Y4" "0.5"	
			}
			
			"speakers_limit"	
			{
				"input2[*]" "@speaker_volume.output"		
			}
			
			"update_track"
			{
				"operator" "track_update"
				"stop_channel_on_track" "false"	
			}
		}
		
		"stop_stack"
		{
			"4layer_stop" 
			{
				"operator" "sys_stop_entries"
				"input_execute" "1.0"
				"input_max_entries" "0.000000" //A sound will not stop itself from playing.
				"match_entry" "DOTAMusic.ExploreMusicTutorial"
				"match_entity" "false"	
				"match_substring" "true"
			}
			
			"4layer_stop_loop" 
			{
				"operator" "sys_stop_entries"
				"input_execute" "1.0"
				"input_max_entries" "0.000000" //A sound will not stop itself from playing.
				"match_entry" "DOTAMusic.ExploreMusicTutorial_01"
				"match_entity" "false"	
				"match_substring" "false"
			}
		}
	}
}

"DOTAMusic.ExploreMusicTutorial_01_Layer_02"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.3"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\valve_dota_music_001\music\explore_01_layer_02.mp3"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0"
				"end_point" "161.802"
				"track_name" "explore2"
				"sync_track_name" "explore2"
				"track_priority" "1"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "0.000"
						"2" "161.802"
					}	
				}
				"override_priority" "false"	
			}
		}
		
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"start_stack"
		{
			"get_random_delay_opvar"
			{
				"operator" "get_opvar_float"
				"opvar" 	"explore_random_delay_opvar"
			}
		
			"explore_music_delay_output"
			{
				"operator" "sys_output"
				"input_float" "@get_random_delay_opvar.output" //delays the start of a sound by a random amount
				"output" "delay"
			}
		}
		
		"update_stack"
		{
			
			"import_stack" "dota_update_music_4layer"
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"volume_fade_out"
			{
				"input_max" "2"
 			}
			
			"intensity_to_vol_remap"
			{
				"input_X1" "0.1"	
				"input_Y1" "0.1"	
				"input_X2" "0.33"	
				"input_Y2" "1.0"	
				"input_X3" "0.33"	
				"input_Y3" "1.0"	
				"input_X4" "0.33"	
				"input_Y4" "1.0"	
			}
			
			"speakers_limit"	
			{
				"input2[*]" "@speaker_volume.output"		
			}
			
			"update_track"
			{
				"operator" "track_update"
				"stop_channel_on_track" "false"	
			}
		}
		
		"stop_stack"
		{
			"4layer_stop" 
			{
				"operator" "sys_stop_entries"
				"input_execute" "1.0"
				"input_max_entries" "0.000000" //A sound will not stop itself from playing.
				"match_entry" "DOTAMusic.ExploreMusicTutorial"
				"match_entity" "false"	
				"match_substring" "true"
			}
			
			"4layer_stop_loop" 
			{
				"operator" "sys_stop_entries"
				"input_execute" "1.0"
				"input_max_entries" "0.000000" //A sound will not stop itself from playing.
				"match_entry" "DOTAMusic.ExploreMusicTutorial_01"
				"match_entity" "false"	
				"match_substring" "false"
			}
		}
	}
}

"DOTAMusic.ExploreMusicTutorial_01_Layer_03"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.4"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\valve_dota_music_001\music\explore_01_layer_03.mp3"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0"
				"end_point" "161.802"
				"track_name" "explore3"
				"sync_track_name" "explore3"
				"track_priority" "1"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "0.000"
						"2" "161.802"
					}	
				}
				"override_priority" "false"	
			}
		}
		
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"start_stack"
		{
			"get_random_delay_opvar"
			{
				"operator" "get_opvar_float"
				"opvar" 	"explore_random_delay_opvar"
			}
		
			"explore_music_delay_output"
			{
				"operator" "sys_output"
				"input_float" "@get_random_delay_opvar.output" //delays the start of a sound by a random amount
				"output" "delay"
			}
		}
		
		"update_stack"
		{
			
			"import_stack" "dota_update_music_4layer"
 			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"volume_fade_out"
			{
				"input_max" "2"
 			}
			
			"intensity_to_vol_remap"
			{
				"input_X1" "0.0"	
				"input_Y1" "0.1"	
				"input_X2" "0.2"	
				"input_Y2" "0.1"	
				"input_X3" "0.6"	
				"input_Y3" "0.3"	
				"input_X4" "1.0"	
				"input_Y4" "1.0"				
			}
			
			"speakers_limit"	
			{
				"input2[*]" "@speaker_volume.output"		
			}
			
			"update_track"
			{
				"operator" "track_update"
				"stop_channel_on_track" "false"	
			}
		}
		
		"stop_stack"
		{
			"4layer_stop" 
			{
				"operator" "sys_stop_entries"
				"input_execute" "1.0"
				"input_max_entries" "0.000000" //A sound will not stop itself from playing.
				"match_entry" "DOTAMusic.ExploreMusicTutorial"
				"match_entity" "false"	
				"match_substring" "true"
			}
			
			"4layer_stop_loop" 
			{
				"operator" "sys_stop_entries"
				"input_execute" "1.0"
				"input_max_entries" "0.000000" //A sound will not stop itself from playing.
				"match_entry" "DOTAMusic.ExploreMusicTutorial_01"
				"match_entity" "false"	
				"match_substring" "false"
			}
		}
	}
}

//BLOCKEND

"DOTAMusic.StateHeroDeath"
{
	"channel"		"CHAN_AUTO"
	"volume"		"1.0"
	"soundlevel"	"SNDLVL_NONE"
	"pitch"			"PITCH_NORM"

	"wave"	"#music/valve_dota_music_001/music/killed.mp3"

	"operator_stacks"
	{	
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.00"
				"track_name" "stinger_high_priority"
				//"sync_track_name" "main"
				"track_priority" "50"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "1.118"
					}
				}
				"override_priority" "false"	
			}
		}
		
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"start_stack"
		{
			"get_debug_printing_opvar" 
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************TRANSITION TO DEATH MUSIC STARTED**************" 
			{
				"execute_once" "false"
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}
			
			"limit_sound_explore"
			{
				"operator" "sys_stop_entries"
				"input_max_entries" "0.000000" //A sound will not stop itself from playing.
				"match_entity" "false"	
				"match_substring" "true"
				"match_entry" "DOTAMusic.Explore" //We allow no instances of Explore when the death stinger knells		
			}
			
			"limit_sound_laning"
			{
				"operator" "sys_stop_entries"
				"input_max_entries" "0.000000" //A sound will not stop itself from playing.
				"match_entity" "false"	
				"match_substring" "true"
				"match_entry" "DOTAMusic.Laning"
			}
			
			"limit_sound_battle"
			{
				"operator" "sys_stop_entries"
				"input_max_entries" "0.000000" //A sound will not stop itself from playing.
				"match_entity" "false"	
				"match_substring" "true"
				"match_entry" "DOTAMusic.BattleMusic" //We allow no instances of battle when the death stinger knells		
			}
			
			"stop_main_track"
			{
				"operator" "track_stop"
				"track_name" "main"
			}
		}
			
		"update_stack"
		{
			"import_stack" "dota_update_death_music"
			"mixer"
			{
				"mixgroup" "Music"
			}
			"update_track"
			{
				"operator" "track_update"
				"autoqueue_entry_at_end_point" "DOTAMusic_Hero.DeathMode"
				"stop_channel_on_track" "true"	
			}
		}
	}
}

"DOTAMusic_Hero.DeathMode"
{
	"channel"		"CHAN_AUTO"
	"volume"		"0.7"
	"soundlevel"	"SNDLVL_NONE"
	"pitch"			"PITCH_NORM"

	"wave"	"*#music\valve_dota_music_001\music\dead.mp3"

	"operator_stacks"
	{	
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.00"
				"track_name" "dead"
				"track_priority" "55"	
			}
		}
		
		"start_stack"
		{
			
			"import_stack" "dota_start_music_type_tracker"
			
			"add_music_value"
			{
				"input2" "16" //Dead
			}
			
            "get_debug_printing_opvar" 
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************DEATH MUSIC STARTED**************" 
			{
				"execute_once" "false"
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}
		}
		
		"update_stack"
		{
			"import_stack" "dota_update_death_music"
			"mixer"
			{
				"mixgroup" "Music"
			}
			"volume_fade_out"
			{
				"input_max" "4"
 			}
			"update_track"
			{
				"operator" "track_update"
				"stop_channel_on_track" "false"  
			}
						
			"block_entry_time_calc"
			{
				"operator" "math_float"
				"apply"	"add"
				"input1" "0.2"
				"input2" "@elapsed_time.output_sound_elapsed"
			}
			
			"block_entries"
			{
				"operator" "sys_block_entries"
				"input_active" "1.0"	
				"input_duration" "@block_entry_time_calc.output" //in seconds, you can use "@get_random.output" for a random blocking period
				"match_substring" "true"
				"match_entry" "DOTAMusic_Hero.DeathMode" //The sound entry to use
				"match_channel" "false"
				"match_entity" "false"
			}
		}
		
		"stop_stack"
		{
			"import_stack" "dota_stop_music_type_tracker"
			
			"remove_music_value"
			{
				"input2" "16" //Dead, this values is pushed with the death stinger.
			}	
			
            "get_debug_printing_opvar" 
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************DEATH MUSIC KILLED**************" 
			{
				"execute_once" "false"
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}
		}
	}
}

// called from util, state ganked music
"DOTAMusic.GankedMusicSm"
{
	"channel"		"CHAN_STATIC"
	// "volume"		"0.0"
	"volume"		"0.75"
	"soundlevel"	"SNDLVL_NONE"
	"rndwave"
	{
		"wave"			"music\valve_dota_music_001\music\ganked_sml_01.wav"
		"wave"			"music\valve_dota_music_001\music\ganked_sml_02.wav"
	}
	
	"operator_stacks"
	{
		"update_stack"
		{	
			"gank_music_request_opvar" 
			{
				"operator" "get_opvar_float"
				"opvar" "music_probability_gank"	
			}		
		
			"remap_gank_opvar_value"
			{
				"operator" "math_curve_2d_4knot"
				"curve_type" "linear"	
				"input" "@gank_music_request_opvar.output"
				"input_X1" "0.0"	
				"input_Y1" "0.0"	
				"input_X2" "0.30"	
				"input_Y2" "0.25"	
				"input_X3" "0.4"	
				"input_Y3" "0.6"	
				"input_X4" "0.55"	
				"input_Y4" "1.0"	
			}	

			"import_stack" "dota_update_default"		
			"mixer"
			{
				"mixgroup" "Music"
			}
			"volume_accumulate"
			{
				"input12" "@remap_gank_opvar_value.output"
			}			
		}
	}
}

"DOTAMusic.GankedMusicMd"
{
	"channel"		"CHAN_STATIC"
	// "volume"		"0.0"
	"volume"		"0.75"
	"soundlevel"	"SNDLVL_NONE"
	"rndwave"
	{
		"wave"			"music\valve_dota_music_001\music\ganked_med_01.wav"
		"wave"			"music\valve_dota_music_001\music\ganked_med_02.wav"
	}
	
	"operator_stacks"
	{
		"update_stack"
		{	
			"gank_music_request_opvar" 
			{
				"operator" "get_opvar_float"
				"opvar" "music_probability_gank"	
			}		
		
			"remap_gank_opvar_value"
			{
				"operator" "math_curve_2d_4knot"
				"curve_type" "linear"	
				"input" "@gank_music_request_opvar.output"
				"input_X1" "0.55"	
				"input_Y1" "0.25"	
				"input_X2" "0.65"	
				"input_Y2" "0.5"	
				"input_X3" "0.7"	
				"input_Y3" "0.7"	
				"input_X4" "0.8"	
				"input_Y4" "1.0"	
			}	

			"import_stack" "dota_update_default"	
			"mixer"
			{
				"mixgroup" "Music"
			}
			"volume_accumulate"
			{
				"input12" "@remap_gank_opvar_value.output"
			}	
		}
	}
}

"DOTAMusic.GankedMusicLg"
{
	"channel"		"CHAN_STATIC"
	// "volume"		"0.0"
	"volume"		"0.75"
	"soundlevel"	"SNDLVL_NONE"
	"rndwave"
	{
		"wave"			"music\valve_dota_music_001\music\ganked_lg_01.wav"
		"wave"			"music\valve_dota_music_001\music\ganked_lg_02.wav"
	}
	
	"operator_stacks"
	{
		"update_stack"
		{	
			"gank_music_request_opvar" 
			{
				"operator" "get_opvar_float"
				"opvar" "music_probability_ganker"	
			}		
		
			"remap_gank_opvar_value"
			{
				"operator" "math_curve_2d_4knot"
				"curve_type" "linear"	
				"input" "@gank_music_request_opvar.output"
				"input_X1" "0.8"	
				"input_Y1" "0.25"	
				"input_X2" "0.9"	
				"input_Y2" "0.5"	
				"input_X3" "1.0"	
				"input_Y3" "1.0"	
				"input_X4" "1.0"	
				"input_Y4" "1.0"	
			}	

			"import_stack" "dota_update_default"	
			"mixer"
			{
				"mixgroup" "Music"
			}
			"volume_accumulate"
			{
				"input12" "@remap_gank_opvar_value.output"
			}	
		}
	}
}
